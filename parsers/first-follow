
followSets = {}
updated is false

repeat

	in grammar g, for each production p

		first set calculation

		let leftsymbol be ls

		let updateEpsilon be false

		in p, for each right symbol rs

			firstSets[ls] = firstSets[rs] U firstSets[ls]

			if firstSets[ls] has changed set updated to true

			if rs is not in epsilon ( which means we have our first set item ) 
			then set updateEpsilon to true and break out of loop

		if updateEpsilon is true, it means that their was an epsilon symbol in the previous loop


		follow set calculation

		let aux be followsSets[ls] - assign the follow set for the current lhs to aux

		in reversed p, for each right symbol rs - reverse the production, so we start at end

		if there is a follow set for symbol rs

		    concat the follow set for rs with the follow set for ls, set updated as true if we add something new

		if the symbol rs is in epsilon

		    concat the follow set for lhs with the first set for symbols rs, set updated to true if we add something new

		else set aux to be the first set for symbol rs


	end production loop

while updated is true

